# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:57:09+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint


class Access(BaseModel):
    access: List[str] = Field(
        ..., description='The approved access restrictions for this app'
    )
    appId: str = Field(..., description='The id of the app that owns this access key')
    date: int = Field(
        ...,
        description='The time (in milliseconds) of when the user agreed to the access request',
    )
    ip: str = Field(
        ..., description='The ip address of the user agreeing to the access request'
    )
    isValid: bool = Field(
        ...,
        description='True if this access is up to date with the current version of the app',
    )
    userId: str = Field(..., description='The id for this user')


class Account(BaseModel):
    accountName: str = Field(..., description='The name of the Stripe account')
    country: str = Field(..., description='The country for this Stripe account')
    defaultCurrency: str = Field(
        ..., description='The default currency for this Stripe account'
    )
    stripeId: str = Field(..., description='The id of the Stripe account')


class Accounts(BaseModel):
    accounts: List[Account] = Field(
        ..., description='An array of connected Stripe accounts'
    )
    developerId: str = Field(..., description='The id of the developer')


class AppEntry(BaseModel):
    appId: str = Field(..., description='The id of the app involved in this action')
    date: int = Field(
        ..., description='The date (in millis) of when this action was performed'
    )


class Type(Enum):
    text = 'text'
    select = 'select'
    multi = 'multi'


class Attributes(BaseModel):
    name: str = Field(..., description='The name of this attribute')
    type: Type = Field(..., description='The type of this attribute')
    values: Optional[str] = Field(
        None, description='A comma seperated list of values allowed for this attribute'
    )


class Card(BaseModel):
    address_city: Optional[str] = Field(None, description="The card holder's city")
    address_country: Optional[str] = Field(
        None, description="The card holder's country"
    )
    address_line1: Optional[str] = Field(
        None, description="The card holder's street address"
    )
    address_line2: Optional[str] = Field(
        None, description="The card holder's street address"
    )
    address_state: Optional[str] = Field(
        None, description="The card holder's city state/province"
    )
    address_zip: Optional[str] = Field(
        None, description="The card holder's zip/postal code"
    )
    brand: str = Field(..., description='The brand of the credit card. Example: Visa')
    cardId: str = Field(..., description='The id for this credit card')
    exp_month: int = Field(..., description='The two digit expiration month')
    exp_year: int = Field(..., description='The four digit expiration year')
    isDefault: bool = Field(..., description='True if this is the default credit card')
    last4: str = Field(..., description='The last 4 digits of the credit card number')
    name: str = Field(..., description="The card holder's full name")


class Cards(BaseModel):
    cards: List[Card] = Field(
        ..., description='An array of credit cards added by this user'
    )
    userId: str = Field(..., description='The id of this user')


class Category(BaseModel):
    description: str = Field(..., description='The description of this category')
    name: str = Field(..., description='The name of this category')


class CategoryGroups(BaseModel):
    categories: List[Category] = Field(
        ..., description='The categories supported by this category group'
    )
    name: str = Field(..., description='The name of this category group')


class DataTotal(BaseModel):
    field_field: Optional[int] = Field(
        None, alias='$field', description='The totals for the field'
    )


class Developer(BaseModel):
    created: int = Field(
        ..., description='The time (in millis) of when this developer was created'
    )
    customData: Optional[Dict[str, Any]] = Field(
        None,
        description='A custom JSON object that you can create and attach to this record',
    )
    developerId: str = Field(..., description='The id of this developer')
    email: Optional[str] = Field(None, description="The developer's email")
    name: Optional[str] = Field(None, description="The developer's name")
    type: Optional[str] = Field(None, description='The type for this developer')


class DeveloperAccount(BaseModel):
    customData: Optional[Dict[str, Any]] = Field(
        None,
        description='A custom JSON object that you can create and attach to this record',
    )
    developerAccountId: str = Field(..., description='The id of this developer account')
    developerId: str = Field(
        ..., description='The id of the developer that this account belongs to'
    )
    email: Optional[str] = Field(None, description='The contact email address')
    name: Optional[str] = Field(None, description='The name for the account')


class DeveloperAccountPages(BaseModel):
    count: int = Field(..., description='The total number of results')
    list: List[DeveloperAccount] = Field(
        ..., description='An array of developerAccounts for the current page'
    )
    pageNumber: int = Field(
        ..., description='The current page number for this result set'
    )
    pages: int = Field(
        ..., description='The total number of pages available for this result set'
    )


class DeveloperPages(BaseModel):
    count: int = Field(..., description='The total number of results')
    list: List[Developer] = Field(
        ..., description='An array of developers for the current page'
    )
    pageNumber: int = Field(
        ..., description='The current page number for this result set'
    )
    pages: int = Field(
        ..., description='The total number of pages available for this result set'
    )


class DeveloperToken(BaseModel):
    developerId: str = Field(
        ..., description='The id of the developer connecting their Stripe account'
    )
    expires: int = Field(
        ..., description='The time (in milliseconds) when this URL expires'
    )
    targetUrl: str = Field(
        ...,
        description='The URL that this developer can use to connect their Stripe account',
    )


class EventType(Enum):
    app_submitted = 'app.submitted'
    app_approved = 'app.approved'
    app_suspended = 'app.suspended'
    app_unsuspended = 'app.unsuspended'
    app_rejected = 'app.rejected'
    app_inReview = 'app.inReview'
    app_installed = 'app.installed'
    app_uninstalled = 'app.uninstalled'
    review_created = 'review.created'
    review_updated = 'review.updated'
    review_approved = 'review.approved'
    review_spam = 'review.spam'
    review_removed = 'review.removed'
    user_created = 'user.created'
    user_updated = 'user.updated'
    user_removed = 'user.removed'
    user_invalidPaymentDetails = 'user.invalidPaymentDetails'
    user_paymentDetailsRequired = 'user.paymentDetailsRequired'
    developer_created = 'developer.created'
    developer_updated = 'developer.updated'
    developer_removed = 'developer.removed'
    developer_paymentDetailsRequired = 'developer.paymentDetailsRequired'
    permission_added = 'permission.added'
    permission_removed = 'permission.removed'
    payment_complete = 'payment.complete'
    payment_refunded = 'payment.refunded'
    payment_required = 'payment.required'
    ownership_expired = 'ownership.expired'


class MimeCheck(Enum):
    PASSED = 'PASSED'
    FAILED = 'FAILED'


class FileDownload(BaseModel):
    url: str = Field(..., description='The signed URL for downloading a private file')


class FoundVirus(BaseModel):
    fileName: Optional[str] = Field(None, description='The name of the file')
    virusName: Optional[str] = Field(None, description='The name of the virus')


class Hash(BaseModel):
    MD5: Optional[str] = Field(None, description='The MD5 hash for this uploaded file.')
    SHA_1: Optional[str] = Field(
        None, alias='SHA-1', description='The SHA-1 hash for this uploaded file.'
    )
    SHA_256: Optional[str] = Field(
        None, alias='SHA-256', description='The SHA-256 hash for this uploaded file.'
    )


class Market(BaseModel):
    attributes: List[Attributes] = Field(
        ..., description='The different app attributes supported by this marketplace'
    )
    categoryGroups: Optional[List[CategoryGroups]] = Field(
        None, description='The category groups supported by this marketplace'
    )
    marketplaceId: str = Field(..., description='The id of this marketplace')
    previewAppUrl: str = Field(
        ..., description='The URL template for previewing apps on this marketplace'
    )
    viewAppUrl: str = Field(
        ..., description='The URL template for viewing apps on this marketplace'
    )


class MarketPages(BaseModel):
    count: int = Field(..., description='The total number of results')
    list: List[Market] = Field(
        ..., description='An array of markets for the current page'
    )
    pageNumber: Optional[int] = Field(
        None, description='The current page number for this result set'
    )
    pages: Optional[int] = Field(
        None, description='The total number of pages available for this result set'
    )


class BillingPeriod(Enum):
    daily = 'daily'
    weekly = 'weekly'
    monthly = 'monthly'
    annually = 'annually'


class FeePayer(Enum):
    developer = 'developer'
    marketplace = 'marketplace'


class License(Enum):
    single = 'single'


class Subtype(Enum):
    usage = 'usage'
    seat = 'seat'


class Type1(Enum):
    free = 'free'
    single = 'single'
    recurring = 'recurring'


class Model(BaseModel):
    billingPeriod: Optional[BillingPeriod] = Field(
        None,
        description='The billingPeriod along with the billingPeriodUnit make up the time between billing cycles',
    )
    billingPeriodUnit: Optional[int] = Field(
        None,
        description='The billingPeriod along with the billingPeriodUnit make up the time between billing cycles',
    )
    commission: int = Field(
        ...,
        description="The marketplace commission applied to this app's model multiplied by 100 to include two digits for fractions of a percent",
    )
    currency: str = Field(..., description='The ISO 4217 currency code for this price')
    customData: Optional[Dict[str, Any]] = Field(
        None,
        description='A custom JSON object that you can create and attach to this record',
    )
    feePayer: FeePayer = Field(
        ..., description='The payee that will be paying for any payment processing fees'
    )
    license: License = Field(
        ...,
        description='The license model type. Single allows a purchase to a single user or organization',
    )
    modelId: Optional[str] = Field(
        None, description='The id that uniquely identifies this model'
    )
    price: int = Field(..., description='The price of this app in cents')
    subtype: Optional[Subtype] = Field(None, description='The pricing model subtype')
    trial: int = Field(
        ..., description='The maximum number of free trial days available'
    )
    type: Type1 = Field(
        ...,
        description='The pricing model type. Free has no cost, single has a one time purchase cost and recurring requires a monthly subscription',
    )


class OwnershipStatus(Enum):
    pending = 'pending'
    active = 'active'
    uninstalled = 'uninstalled'
    cancelled = 'cancelled'


class OwnershipType(Enum):
    full = 'full'
    subscription = 'subscription'
    trial = 'trial'


class Ownership(BaseModel):
    appId: str = Field(..., description='The id of the app that is owned')
    customData: Optional[Dict[str, Any]] = Field(
        None,
        description='A custom JSON object that you can create and attach to this record',
    )
    date: int = Field(
        ..., description='The date (in millis) of when this app was owned'
    )
    developerId: str = Field(..., description='The id of the developer for this app')
    expires: Optional[int] = Field(
        None, description='The date (in millis) of when this app ownership expires'
    )
    model: Model
    ownershipId: str = Field(..., description='The id of this ownership')
    ownershipStatus: OwnershipStatus = Field(
        ..., description='The current ownership status for this app'
    )
    ownershipType: OwnershipType = Field(
        ..., description='The current ownership type for this app'
    )
    uninstallDate: Optional[int] = Field(
        None, description='The date (in millis) of when this app was uninstalled'
    )
    userId: str = Field(..., description='The id of the user that owns this app')


class OwnershipPages(BaseModel):
    count: int = Field(..., description='The total number of results')
    list: List[Ownership] = Field(
        ..., description='An array of ownership records for the current page'
    )
    pageNumber: Optional[int] = Field(
        None, description='The current page number for this result set'
    )
    pages: Optional[int] = Field(
        None, description='The total number of pages available for this result set'
    )


class Profanity(BaseModel):
    end: int = Field(..., description='The ending location of the profanity')
    start: int = Field(..., description='The starting location of the profanity')
    word: str = Field(..., description='The profane word')


class Restrictions(BaseModel):
    own: Optional[Dict[str, Any]] = Field(
        None,
        description="A custom object containing fields paired with an array value of restrictions. Restricts the users that may own this app. Example: {'country':['Canada','Mexico']}",
    )
    view: Optional[Dict[str, Any]] = Field(
        None,
        description="A custom object containing fields paired with an array value of restrictions. Restricts the users that may view this app. Example: {'country':['Canada','Mexico']}",
    )


class Revenue(BaseModel):
    developer: int = Field(
        ...,
        description='The total revenue generated for the developer by this app in cents',
    )
    total: int = Field(
        ..., description='The total revenue generated by this app in cents'
    )


class ReviewEntry(BaseModel):
    date: int = Field(
        ..., description='The date (in millis) of when this action was performed'
    )
    reviewId: str = Field(
        ..., description='The id of the review involved in this action'
    )


class Stat(BaseModel):
    value: int = Field(..., description='The statistic value')


class Reason(Enum):
    profanity = 'profanity'
    spam = 'spam'


class Value(Enum):
    pending = 'pending'
    spam = 'spam'
    flagged = 'flagged'
    approved = 'approved'


class Status(BaseModel):
    profanity: List[Profanity] = Field(
        ..., description='A list of profanity found in this review'
    )
    reason: Reason = Field(
        ..., description='Text describing the reason for the current status'
    )
    value: Value = Field(..., description='The current status value')


class Type2(Enum):
    payment = 'payment'
    refund = 'refund'


class Transaction(BaseModel):
    amount: int = Field(..., description='The total amount paid in cents')
    appId: str = Field(
        ..., description='The id of the app involved with this transaction'
    )
    customData: Optional[Dict[str, Any]] = Field(
        None,
        description='A custom JSON object that you can create and attach to this record',
    )
    date: int = Field(
        ..., description='The date (in millis) of when this transaction occurred'
    )
    developerAmount: Optional[int] = Field(
        None, description='The total amount paid to the developer in cents'
    )
    developerId: str = Field(
        ..., description='The id of the developer involved with this transaction'
    )
    feeAmount: Optional[int] = Field(
        None, description='The total amount paid to payment processing fees in cents'
    )
    marketplaceAmount: Optional[int] = Field(
        None, description='The total amount paid to the marketplace owner in cents'
    )
    ownershipId: str = Field(
        ..., description='The id for the ownership associated with this transaction'
    )
    transactionId: str = Field(..., description='The id for this transaction')
    type: Type2 = Field(..., description='The type for this transaction')
    userId: str = Field(..., description='The id of the user making the transaction')


class TransactionPages(BaseModel):
    count: int = Field(..., description='The total number of results')
    list: List[Transaction] = Field(
        ..., description='An array of paymnets for the current page'
    )
    pageNumber: Optional[int] = Field(
        None, description='The current page number for this result set'
    )
    pages: Optional[int] = Field(
        None, description='The total number of pages available for this result set'
    )


class User(BaseModel):
    created: int = Field(
        ..., description='The date (in millis) of when this user was created'
    )
    customData: Dict[str, Any] = Field(
        ...,
        description='A custom JSON object that you can create and attach to this record',
    )
    email: Optional[str] = Field(None, description="The user's email")
    name: Optional[str] = Field(None, description="The user's name")
    type: Optional[str] = Field(None, description='The type for this user')
    userId: str = Field(..., description='The id of this user')


class UserAccount(BaseModel):
    customData: Optional[Dict[str, Any]] = Field(
        None,
        description='A custom JSON object that you can create and attach to this record',
    )
    email: Optional[str] = Field(None, description='The contact email address')
    name: Optional[str] = Field(None, description='The name for the account')
    userAccountId: str = Field(..., description='The id of this user account')
    userId: str = Field(
        ..., description='The id of this user that this account belongs to'
    )


class UserAccountPages(BaseModel):
    count: int = Field(..., description='The total number of results')
    list: List[UserAccount] = Field(
        ..., description='An array of userAccounts for the current page'
    )
    pageNumber: Optional[int] = Field(
        None, description='The current page number for this result set'
    )
    pages: Optional[int] = Field(
        None, description='The total number of pages available for this result set'
    )


class UserPages(BaseModel):
    count: int = Field(..., description='The total number of results')
    list: List[User] = Field(..., description='An array of users for the current page')
    pageNumber: Optional[int] = Field(
        None, description='The current page number for this result set'
    )
    pages: Optional[int] = Field(
        None, description='The total number of pages available for this result set'
    )


class VirusScan(BaseModel):
    finished: Optional[int] = Field(
        None, description="The date (in milliseconds) when this file finished it's scan"
    )
    foundViruses: Optional[List[FoundVirus]] = Field(
        None, description='The list of viruses found in this file'
    )
    started: Optional[int] = Field(
        None, description="The date (in milliseconds) when this file started it's scan"
    )
    status: str = Field(
        ..., description='The status of this scan. Can be NOT_SCANNED, CLEAN or DIRTY'
    )


class Status1(Enum):
    inReview = 'inReview'
    approved = 'approved'
    suspended = 'suspended'
    rejected = 'rejected'


class ModifiedBy(Enum):
    developer = 'developer'
    administrator = 'administrator'


class FilesPostRequest(BaseModel):
    file: bytes = Field(..., description='The file to be uploaded')


class StatsSeriesPeriodFieldsGetResponse(RootModel[List[List[Dict[str, Any]]]]):
    root: List[List[Dict[str, Any]]]


class Period(Enum):
    day = 'day'
    month = 'month'


class App(BaseModel):
    access: Optional[List[str]] = Field(
        None, description='A custom defined list of access requirements'
    )
    allow: Restrictions
    appId: str = Field(..., description='The id of this app')
    attributes: Dict[str, Any] = Field(
        ..., description='A custom defined list of app attributes'
    )
    created: int = Field(
        ..., description='The date (in millis) that this app was created'
    )
    customData: Dict[str, Any] = Field(
        ...,
        description='A custom JSON object that you can create and attach to this record',
    )
    developerId: str = Field(
        ..., description='The id of the developer that owns this app'
    )
    isLive: bool = Field(..., description='True if this is the live version of the app')
    lastUpdated: int = Field(
        ..., description='The date (in millis) that this app was last modified'
    )
    model: List[Model] = Field(
        ..., description='The models that describes the cost and pricing for this app'
    )
    name: str = Field(..., description='The name of this app')
    ownership: Optional[Ownership] = None
    randomize: int = Field(
        ...,
        description='A random number that changes hourly and is used for achieving a random sort order when displaying apps',
    )
    rating: conint(ge=0, le=500) = Field(
        ...,
        description='The average review rating for this app. Reviews are rated from 100 (one star) to 500 (five star)',
    )
    restrict: Restrictions
    reviewCount: Optional[int] = Field(
        None, description='The number of approved reviews for this app.'
    )
    safeName: List[str] = Field(
        ...,
        description='URL safe aliases that can be used to identify this app even after name changes. The current alias is always at position 0.',
    )
    statistics: Optional[Dict[str, Any]] = Field(
        None,
        description='A field containing summary stats about the app and is specially designed to allow apps to be sorted by popularity',
    )
    status: Status
    submittedDate: Optional[int] = Field(
        None,
        description='The date (in millis) that this app was submitted for approval',
    )
    type: Optional[str] = Field(None, description='The type for this app')
    version: int = Field(..., description='The version number for this app')


class AppPages(BaseModel):
    count: int = Field(..., description='The total number of results')
    list: List[App] = Field(..., description='An array of apps for the current page')
    pageNumber: Optional[int] = Field(
        None, description='The current page number for this result set'
    )
    pages: Optional[int] = Field(
        None, description='The total number of pages available for this result set'
    )


class AppTotal(BaseModel):
    field_appId: DataTotal = Field(..., alias='$appId')


class File(BaseModel):
    contentType: Optional[str] = Field(
        None, description='The internet media type of the file'
    )
    fileId: str = Field(..., description='The id of the uploaded file')
    fileUrl: Optional[str] = Field(
        None, description='The path where the file can be located.'
    )
    hash: Optional[Hash] = None
    mimeCheck: Optional[MimeCheck] = Field(
        None,
        description="The mime type validation check to see if the extension of this file matches it's content. Can be PASSED or FAILED",
    )
    name: str = Field(..., description='The name of the uploaded file')
    size: int = Field(..., description='The number of bytes in the uploaded file')
    uploadDate: int = Field(
        ..., description='The time in milliseconds when the file was uploaded'
    )
    virusScan: Optional[VirusScan] = None


class FilePages(BaseModel):
    count: int = Field(..., description='The total number of results')
    list: List[File] = Field(..., description='An array of users for the current page')
    pageNumber: Optional[int] = Field(
        None, description='The current page number for this result set'
    )
    pages: Optional[int] = Field(
        None, description='The total number of pages available for this result set'
    )


class Parent(BaseModel):
    status: Optional[Status] = None


class Review(BaseModel):
    appId: str = Field(..., description='The Id of the App that owns this review')
    customData: str = Field(
        ...,
        description='A custom JSON object that you can create and attach to this record',
    )
    description: str = Field(
        ..., description="The review's description. Limited to 2000 characters."
    )
    headline: str = Field(
        ..., description="The review's headline. Limited to 50 characters."
    )
    rating: int = Field(
        ...,
        description='The rating given within this review. The rating is represented as an integer between 100 and 500 (1 - 5 stars)',
    )
    reportDate: int = Field(
        ..., description='The date (in millis) this Review was posted'
    )
    reviewId: str = Field(..., description='The id for this review.')
    status: Status
    type: Optional[str] = Field(None, description='The type for this review')
    user: Optional[User] = None
    userAccount: Optional[UserAccount] = None
    userAccountId: Optional[str] = Field(
        None, description='The id of the user account that posted this review'
    )
    userId: str = Field(..., description='The id of the User that posted this review')


class ReviewPages(BaseModel):
    count: int = Field(..., description='The total number of results')
    list: List[Review] = Field(
        ..., description='An array of reviews for the current page'
    )
    pageNumber: Optional[int] = Field(
        None, description='The current page number for this result set'
    )
    pages: Optional[int] = Field(
        None, description='The total number of pages available for this result set'
    )


class SearchPages(BaseModel):
    count: int = Field(..., description='The total number of results')
    list: List[App] = Field(..., description='An array of results for the current page')
    pageNumber: Optional[int] = Field(
        None, description='The current page number for this result set'
    )
    pages: Optional[int] = Field(
        None, description='The total number of pages available for this result set'
    )


class Total(BaseModel):
    apps: AppTotal
    end: Optional[int] = Field(
        None, description='The end date for this total (in millis)'
    )
    start: Optional[int] = Field(
        None, description='The start date for this total (in millis)'
    )
    totals: DataTotal


class AppVersion(BaseModel):
    access: Optional[List[str]] = Field(
        None, description='A custom defined list of access requirements'
    )
    allow: Restrictions
    appId: str = Field(..., description='The id of this app')
    attributes: Optional[Dict[str, Any]] = Field(
        None, description='A custom defined list of app attributes'
    )
    created: int = Field(
        ..., description='The date (in millis) that this app was created'
    )
    customData: Dict[str, Any] = Field(
        ...,
        description='A custom JSON object that you can create and attach to this record',
    )
    developerId: str = Field(
        ..., description='The id of the developer that owns this app'
    )
    isLatestVersion: bool = Field(
        ..., description='True if this is the latest version of this app'
    )
    isLive: bool = Field(..., description='True if this is the live version of the app')
    lastUpdated: int = Field(
        ..., description='The date (in millis) that this app was last modified'
    )
    model: List[Model] = Field(
        ..., description='The models that describes the cost and pricing for this app'
    )
    name: str = Field(..., description='The name of this app')
    parent: Parent
    rating: Optional[conint(ge=0, le=500)] = Field(
        None,
        description='The average review rating for this app. Reviews are rated from 100 (one star) to 500 (five star)',
    )
    restrict: Restrictions
    reviewCount: Optional[int] = Field(
        None, description='The number of approved reviews for this app.'
    )
    safeName: List[str] = Field(
        ...,
        description='URL safe aliases that can be used to identify this app even after name changes. The current alias is always at position 0.',
    )
    status: Status
    type: Optional[str] = Field(None, description='The type for this app')
    version: int = Field(..., description='The version number for this app')


class Event(BaseModel):
    app: Optional[App] = None
    createdDate: int = Field(
        ..., description='The date (in millis) of when this event occurred'
    )
    description: Optional[str] = Field(None, description='A description of the event')
    developer: Optional[Developer] = None
    eventId: str = Field(..., description='The id of the event')
    eventType: EventType = Field(..., description='The current event type')
    marketplaceId: str = Field(
        ..., description='The id of the marketplace that owns this event'
    )
    ownership: Optional[Ownership] = None
    review: Optional[Review] = None
    transaction: Optional[Transaction] = None
    user: Optional[User] = None


class VersionPages(BaseModel):
    count: int = Field(..., description='The total number of results')
    list: List[AppVersion] = Field(
        ..., description='An array of apps for the current page'
    )
    pageNumber: Optional[int] = Field(
        None, description='The current page number for this result set'
    )
    pages: Optional[int] = Field(
        None, description='The total number of pages available for this result set'
    )
